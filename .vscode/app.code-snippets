{
	"Next.js static page component": {
		"scope": "typescriptreact",
		"prefix": "next-page-static",
		"body": [
			"import type { Metadata, ResolvingMetadata } from \"next\";",
			"import { getTranslations } from \"next-intl/server\";",
			"import type { ReactNode } from \"react\";",
			"",
			"import { MainContent } from \"@/components/main-content\";",
			"",
			"interface ${1:Name}PageProps extends EmptyObject {",
			"}",
			"",
			"export async function generateMetadata(",
			"\t_props: Readonly<${1:Name}PageProps>,",
			"\t_parent: ResolvingMetadata,",
			"): Promise<Metadata> {",
			"\tconst t = await getTranslations(\"${1:Name}Page\");",
			"",
			"\tconst metadata: Metadata = {",
			"\t\ttitle: t(\"meta.title\"),",
			"\t};",
			"",
			"\treturn metadata;",
			"}",
			"",
			"export default async function ${1:Name}Page(_props: Readonly<${1:Name}PageProps>): Promise<ReactNode> {",
			"\tconst t = await getTranslations(\"${1:Name}Page\");",
			"",
			"\treturn (",
			"\t\t<MainContent className=\"layout-grid content-start\">",
			"\t\t\t<section className=\"layout-subgrid relative bg-fill-weaker py-16 xs:py-24\">",
			"\t\t\t\t<h1>{t(\"title\")}</h1>$0",
			"\t\t\t</section>",
			"\t\t</MainContent>",
			"\t);",
			"}",
		],
		"description": "Create Next.js static page component",
	},
	"Next.js dynamic page component": {
		"scope": "typescriptreact",
		"prefix": "next-page-dynamic",
		"body": [
			"import type { Metadata, ResolvingMetadata } from \"next\";",
			"import { getTranslations } from \"next-intl/server\";",
			"import type { ReactNode } from \"react\";",
			"",
			"import { MainContent } from \"@/components/main-content\";",
			"import { env } from \"@/config/env.config\";",
			"",
			"interface ${1:Name}PageProps {",
			"\tparams: Promise<{",
			"\t\tid: string;",
			"\t}>;",
			"}",
			"",
			"export const dynamicParams = false;",
			"",
			"export async function generateStaticParams(): Promise<",
			"  Array<Pick<Awaited<${1:Name}PageProps[\"params\"]>, \"id\">>",
			"> {",
			"\tconst ids = await Promise.resolve([])",
			"",
			"\treturn ids.map((id) => {",
			"\t\treturn { id };",
			"\t});",
			"}",
			"",
			"export async function generateMetadata(",
			"\tprops: Readonly<${1:Name}PageProps>,",
			"\t_parent: ResolvingMetadata,",
			"): Promise<Metadata> {",
			"\tconst { params } = props;",
			"",
			"\tconst { id: _id } = await params;",
			"\tconst id = decodeURIComponent(_id);",
			"",
			"\tconst t = await getTranslations(\"${1:Name}Page\");",
			"",
			"\tconst metadata: Metadata = {",
			"\t\ttitle: t(\"meta.title\"),",
			"\t};",
			"",
			"\treturn metadata;",
			"}",
			"",
			"export default async function ${1:Name}Page(props: Readonly<${1:Name}PageProps>): Promise<ReactNode> {",
			"\tconst { params } = props;",
			"",
			"\tconst { id: _id } = await params;",
			"\tconst id = decodeURIComponent(_id);",
			"",
			"\tconst t = await getTranslations(\"${1:Name}Page\");",
			"",
			"\treturn (",
			"\t\t<MainContent className=\"layout-grid content-start\">",
			"\t\t\t<section className=\"layout-subgrid relative bg-fill-weaker py-16 xs:py-24\">",
			"\t\t\t\t<h1>{t(\"title\")}</h1>$0",
			"\t\t\t</section>",
			"\t\t</MainContent>",
			"\t);",
			"}",
		],
		"description": "Create Next.js dynamic page component.",
	},
	"Next.js layout component": {
		"scope": "typescriptreact",
		"prefix": "next-layout",
		"body": [
			"import type { ReactNode } from \"react\";",
			"",
			"interface ${1:Name}LayoutProps {",
			"\tchildren: ReactNode;",
			"}",
			"",
			"export default async function ${1:Name}Layout(props: Readonly<${1:Name}LayoutProps>): Promise<ReactNode> {",
			"\tconst { children } = props;",
			"",
			"\treturn (",
			"\t\t<div>{children}</div>$0",
			"\t)",
			"}",
		],
		"description": "Create Next.js layout component.",
	},
	"React component without props": {
		"prefix": "next-component",
		"body": [
			"import type { ReactNode } from \"react\";",
			"",
			"export function ${1:Name}(): ReactNode {",
			"\t$0",
			"\treturn null;",
			"}",
		],
		"description": "Create React component without props.",
	},
	"React component with props": {
		"prefix": "next-component-props",
		"body": [
			"import type { ReactNode } from \"react\";",
			"",
			"interface ${1:Name}Props {",
			"\t$2",
			"}",
			"",
			"export function ${1:Name}(props: Readonly<${1:Name}Props>): ReactNode {",
			"\tconst { $3 } = props;",
			"\t$0",
			"\treturn null;",
			"}",
		],
		"description": "Create React component with props.",
	},
	"React component with children": {
		"prefix": "next-component-children",
		"body": [
			"import type { ReactNode } from \"react\";",
			"",
			"interface ${1:Name}Props {",
			"\tchildren: ReactNode;",
			"\t$2",
			"}",
			"",
			"export function ${1:Name}(props: Readonly<${1:Name}Props>): ReactNode {",
			"\tconst { children, $3 } = props;",
			"\t$0",
			"\treturn null;",
			"}",
		],
		"description": "Create React component with children.",
	},
	"React \"use cache\" directive": {
		"prefix": "next-use-cache",
		"body": ["\"use cache\";"],
		"description": "Add \"use cache\" directive.",
	},
	"React \"use client\" directive": {
		"prefix": "next-use-client",
		"body": ["\"use client\";"],
		"description": "Add \"use client\" directive.",
	},
	"React \"use server\" directive": {
		"prefix": "next-use-server",
		"body": ["\"use server\";"],
		"description": "Add \"use server\" directive.",
	},
	"Next.js \"server-only\" poison pill": {
		"prefix": "next-server-only",
		"body": ["import \"server-only\";"],
		"description": "Add \"server-only\" import.",
	},
}
